Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2014-07-20T02:00:15-04:00

====== Java ======
Created Sunday 20 July 2014

这个可以用比较经典的“几个哲学家用筷子吃饭”的例子来打个比方，奇数编号的哲学
家先用左手拿起筷子，lock，然后看看右手的筷子有没有free；偶数编号的哲学家先用
右手拿起筷子，lock，然后等左手的筷子，这样协调吃饭就不会有deadlock，当然这个
不是最优解法（懒得去想当时是怎么做的），因为有的哲学家吃了1000次，有的哲学家
只吃了1次，但是这个不仅避免了deadlock,也避免了starvation.

如果是两个threads 要处理一个shared resources， 可以用两把锁（L1, L2), 而且规
定必须是先获得L1, lock, 再获得L2, lock, （用round robin ?? - unsure) 然后处
理resources。如果一个thread 只看到L2 free, 规定它不能acquire L2.

这样判断对吗？或者请大牛说说更简单的方法？
