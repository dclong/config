Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2014-07-20T11:45:10-04:00

====== Collection ======
Created Sunday 20 July 2014


## Hashtable vs [[HashMap]]

1.    Hashtable is synchronized, whereas HashMap is not. This makes HashMap better for non-threaded applications, as unsynchronized Objects typically perform better than synchronized ones.
2.  Hashtable does not allow null keys or values. HashMap allows one null key and any number of null values.
3. One of HashMap's subclasses is LinkedHashMap, so in the event that you'd want predictable iteration order (which is insertion order by default), you could easily swap out the HashMap for a LinkedHashMap. This wouldn't be as easy if you were using Hashtable.

There are 4 commonly used implementations of Map in Java SE - HashMap, TreeMap, Hashtable and LinkedHashMap. If we use one sentence to describe each implementation, it would be the following:

1. HashMap is implemented as a hash table, and there is no ordering on keys or values.
2. TreeMap is implemented based on red-black tree structure, and it is ordered by the key.
3. LinkedHashMap preserves the insertion order
4. Hashtable is synchronized, in contrast to HashMap.

    This gives us the reason that HashMap should be used if it is thread-safe, since Hashtable has overhead for synchronization. 

don't use Hashtable, use [[ConcurrentHashMap]] instead
