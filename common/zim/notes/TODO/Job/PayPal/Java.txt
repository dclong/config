Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2014-10-04T19:31:57-04:00

====== Java ======
Created Saturday 04 October 2014


1. What's the difference between StringBuffer and StringBuilder
StringBuffer is synchronized, StringBuilder is not. 

2. What's the diff between a linkedList and arrayList? When would you use each?
All the differences between LinkedList and ArrayList has there root on difference between Array and LinkedList data-structure. If you are familiar with Array and LinkedList data structure you will most likely derive following differences between them:

1) Since Array is an index based data-structure searching or getting element from Array with index is pretty fast. Array provides O(1) performance for get(index) method but remove is costly in ArrayList as you need to rearrange all elements. On the Other hand LinkedList doesn't provide Random or index based access and you need to iterate over linked list to retrieve any element which is of order O(n).

2) Insertions  are easy and fast in LinkedList as compared to ArrayList because there is no risk of resizing array
and copying content to new array if array gets full which makes adding into ArrayList of O(n) in worst case, while adding is O(1) operation in LinkedList in Java. ArrayList also needs to update its index if you insert something anywhere except at the end of array.

3) Removal is like insertions better in LinkedList than ArrayList.

4) LinkedList has more memory overhead than ArrayList because in ArrayList each index only holds actual object (data) but in case of LinkedList each node holds both data and address of next  and previous node.


3. Language Quiz -Strings
a="hello"; 
b="hello"; 
c=new String("hello"); 
d=c; 
e=new String("hello");
Tell me the result
a) a==b <true, string literals always equal>
b) a.equals(b) <true, content comparison>
c) a==c <false>
d) c==d <true>
e)c.equals d <true>
f) c==e <false>
g)c.equals e <true>

4. Code time!!!
program a method that returns an inOrder Arraylist of the nodes in a tree
public ArrayList<Integer> inOrder(Node root);
1a) One is synchronized and the other one is not. Hence one is quicker than the other due to this fact.
1b) You should know this one.

public ArrayList<Integer> InOrder(Node root){
ArrayList<Integer>result=new ArrayList<Integer>();
if(root=!=null){
result.addAll(InOrder(root.left()));
result.add(root.value());
result.addAll(InOrder(root.right()));
}
return result;
}


- Design and implement an iterator for a singly-linked list class.
- How would you design a garbage collector?
- Given two connected singly-linked lists (giving a T-shaped structure), find the node where they connect.
- Implement a complete singly-linked list class in C++.
- Cycle detection in singly-linked lists.
- Describe the differences between C++ and Java.
- Determine if a binary tree is balanced.
- Describe the architecture of the systems of my current employer.
- Describe how to maintain data integrity across concurrent reads/writes to/from a database.
- How to remove duplicates from an array.
- When does it make sense to store a tree ADT in an array?
- How would you organize a data structure used for parsing arithmetic operations? (Like 3*2 + 4 = 10)
- Write a python script to scan the files in a directory for a word. Return true if the word is found in at least one file and false if otherwise.


1. In-order traversal of a BST, (without using recursion)

2. Suppose you want to convert (transform) your C++ compiled code to a JVM byte code (not java specific), what are the challenges you will face? 

Some points to answer this question:
     In C++ it is the developer who has to take care of freeing memory space for objects that are no longer being referenced. In JVM it will be a garbage collector equivalent that will be doing this job for you. So one of the challenges would to to take care of that portion of the C++ compiled code so that we can let JVM handle it.
     Another challenge would the the use of pointers in C++, due to which it is possible to access memory of other objects leading to errors. This is another challenge that will need to be tackled as the JVM (depending on language specific implementation), may not be using pointers and also may not allow accessing memory of other objects.
     You will need to be aware of the language specific implementation changes that JVM has with C++ compiled code and these will need to be tackled (these sections of code need to be changed so that the compiled code can no be seamlessly converted to a JVM byte code.

3. Reversing a Linked List, String are Anagram or not., Hashtable insertion and Retrieval
4. phone interview: ask concept of class, inner join, overload, override
5. Read nodes at each level BST
Diff interface and abstract
any sql query
what are web services
how to decrease latency for web service
Diff between distributed and parallel computing
Diff between stringbuffer and string
Design Pattern Factory and singleton
How will you convert sorted array in BST
Finding deadlock in code
what is CSS
what is Dom
final, finalize and finally
design classes for bookstore
How will you start a project
java.util ??
stream classses in java
jdbc
Difference between java and c++
Hashmaps
Linked List
How will you merge two sorted array ?
Virtual table in C++ 

Difference between variable hiding and shadowing
