#!/usr/bin/env ipython3

import os
import platform
import shutil
import re
from typing import Any, List, Sequence, Callable, Union
from argparse import ArgumentParser
import logging

USER_ID = os.getuid()
GROUP_ID = os.getgid()
PREFIX = '' if USER_ID == 'root' else 'sudo'
HOME = os.path.expanduser('~')
BASE_DIR = os.path.dirname(os.path.realpath(os.path.abspath(__file__)))
PLATFORM = platform.platform().lower() 


def parse_args(args=None, namespace=None):
    """Parse command-line arguments for the install/configuration util.
    """
    parser = ArgumentParser(description='Easy installation and configuration for Unix/Linux')
    subparsers = parser.add_subparsers(dest='sub_cmd', help='Sub commands.')
    _add_subparser(subparsers, 'CoreUtils', aliases=['cu'])
    _add_subparser(subparsers, 'change shell', aliases=['chsh', 'cs'])
    _add_subparser(subparsers, 'Shell utils', aliases=['sh_utils', 'shutils', 'shu', 'su'])
    _add_subparser(subparsers, 'Bash completion', aliases=['completion', 'comp', 'cp'])
    _add_subparser(subparsers, 'Vim')
    _add_subparser(subparsers, 'NeoVim', aliases=['nvim'])
    _add_subparser(subparsers, 'SpaceVim', aliases=['svim'], add_argument=spacevim_args)
    _add_subparser(subparsers, 'IdeaVim', aliases=['ivim'])
    _add_subparser(subparsers, 'Git')
    _add_subparser(subparsers, 'Python3', aliases=['py3'])
    _add_subparser(subparsers, 'SSH server', aliases=['sshs'])
    _add_subparser(subparsers, 'blogging', aliases=['blog'])
    _add_subparser(subparsers, 'ProxyChains', aliases=['pchains', 'pc'])
    _add_subparser(subparsers, 'download tools', aliases=['dl', 'dlt'])
    _add_subparser(subparsers, 'ANTLR')
    _add_subparser(subparsers, 'BeakerX', aliases=['bkx', 'bk'])
    _add_subparser(subparsers, 'Almond', aliases=['al', 'amd'], add_argument=almond_args)
    _add_subparser(subparsers, 'iTypeScript', aliases=['its'])
    _add_subparser(subparsers, 'Visual Studio Code', aliases=['vscode', 'code'])
    _add_subparser(subparsers, 'IntelliJ IDEA', aliases=['intellij', 'idea', 'ii'])
    return parser.parse_args(args=args, namespace=namespace)


def coreutils(args):
    yes = '-y' if args.yes else ''
    if args.install:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !{PREFIX} apt-get {yes} install coreutils
        elif 'darwin' in PLATFORM:
            !brew install coreutils
        elif 'centos' in PLATFORM:
            !sudo yum install coreutils
    if args.uninstall:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !{PREFIX} apt-get purge {yes} coreutils
        elif 'darwin' in PLATFORM:
            !brew uninstall coreutils
        elif 'centos' in PLATFORM:
            !sudo yum remove coreutils
    if args.config:
        if 'darwin' in PLATFORM:
            !export PATH="/usr/local/opt/findutils/libexec/gnubin:$PATH"
            !export MANPATH="/usr/local/opt/findutils/libexec/gnuman:$MANPATH"


# ------------------------- command-line utils related -------------------------
def shell_utils(args):
    yes = '-y' if args.yes else ''
    if args.install:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !{PREFIX} apt-get install {yes} bash-completion command-not-found man-db
        elif 'darwin' in PLATFORM:
            !brew install bash-completion man-db
        elif 'centos' in PLATFORM:
            !sudo yum install bash-completion command-not-found man-db
    if args.uninstall:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !{PREFIX} apt-get purge {yes} bash-completion command-not-found man-db
        elif 'darwin' in PLATFORM:
            !brew uninstall bash-completion man-db
        elif 'centos' in PLATFORM:
            !sudo yum remove bash-completion command-not-found man-db
    if args.config:
        pass


def change_shell(args):
    yes = '-y' if args.yes else ''
    if args.install:
        pass
    if args.uninstall:
        pass
    if args.config:
        pass
    if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
        pass
    elif 'darwin' in PLATFORM:
        !chsh -s bash
    elif 'centos' in PLATFORM:
        pass


def bash_completion(args):
    if args.install:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !{PREFIX} apt-get install bash-completion
        elif 'darwin' in PLATFORM:
            !brew install bash-completion
        elif 'centos' in PLATFORM:
            !sudo yum install bash-completion
    if args.config:
        pass
    if args.uninstall:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !{PREFIX} apt-get purge bash-completion
        elif 'darwin' in PLATFORM:
            !brew uninstall bash-completion
        elif 'centos' in PLATFORM:
            !sudo yum remove bash-completion

# ------------------------- vim related -------------------------
def vim(args):
    yes = '-y' if args.yes else ''
    if args.install:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !{PREFIX} apt-get install {yes} vim vim-nox
        elif 'darwin' in PLATFORM:
            !brew install vim
        elif 'centos' in PLATFORM:
            !sudo yum install {yes} vim-enhanced
    if args.uninstall:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !{PREFIX} apt-get purge {yes} vim vim-nox
        elif 'darwin' in PLATFORM:
            !brew uninstall vim
        elif 'centos' in PLATFORM:
            !sudo yum remove vim
    if args.config:
        pass


def neovim(args):
    yes = '-y' if args.yes else ''
    if args.install:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !{PREFIX} apt-get install {yes} neovim
        elif 'darwin' in PLATFORM:
            !brew install neovim
        elif 'centos' in PLATFORM:
            !sudo yum install neovim
    if args.uninstall:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !{PREFIX} apt-get purge {yes} neovim
        elif 'darwin' in PLATFORM:
            !brew uninstall neovim
        elif 'centos' in PLATFORM:
            !sudo yum remove neovim
    if args.config:
        pass


def _svim_true_color(true_color: bool):
    FILE = os.path.join(HOME, '.SpaceVim.d/init.toml')
    if os.path.isfile(FILE):
        with open(FILE, 'r') as fin:
            lines = fin.readlines()
        for i, line in enumerate(lines):
            if line.strip().startswith('enable_guicolors'):
                if true_color:
                    lines[i] = line.replace('false', 'true')
                else:
                    lines[i] = line.replace('true', 'false')
        with open(FILE, 'w') as fout:
            fout.writelines(lines)


def spacevim(args):
    yes = '-y' if args.yes else ''
    if args.install:
        !curl -sLf https://spacevim.org/install.sh | bash
        if shutil.which('nvim'):
            !nvim --headless +'call dein#install()' +qall
    if args.uninstall:
        !curl -sLf https://spacevim.org/install.sh | bash -s -- --uninstall
    if args.config:
        des_dir = os.path.join(HOME, '.SpaceVim.d')
        !mkdir -p {des_dir}
        !cp {BASE_DIR}/SpaceVim/init.toml {des_dir}
        _svim_true_color(args.true_color)


def spacevim_args(subparser):
    subparser.add_argument(
        '-t',
        '--true-color',
        dest='true_color',
        type=to_bool,
        default=True,
        help='whether to enable true color (default true) for SpaceVim.')


def ideavim(args):
    if args.config:
        !cp {BASE_DIR}/ideavim/ideavimrc $HOME/.ideavimrc


# ------------------------- coding tools related -------------------------
def git(args):
    yes = '-y' if args.yes else ''
    if args.install:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !{PREFIX} apt-get install {yes} git git-lfs
        elif 'darwin' in PLATFORM:
            !brew install git git-lfs
        elif 'centos' in PLATFORM:
            !sudo yum install git
    if args.uninstall:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !{PREFIX} apt-get purge {yes} git git-lfs
        elif 'darwin' in PLATFORM:
            !brew uninstall git git-lfs
        elif 'centos' in PLATFORM:
            !sudo yum remove git
    if args.config:
        !cp '{BASE_DIR}/git/gitconfig' $HOME/.gitconfig
        !cp '{BASE_DIR}/git/gitignore' $HOME/.gitignore
        if 'darwin' in PLATFORM:
            !cp {BASE_DIR}/git/mac/git_completion {HOME}/.git_completion


def antlr(args):
    yes = '-y' if args.yes else ''
    if args.install:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !{PREFIX} apt-get install {yes} antlr4
        elif 'darwin' in PLATFORM:
            !brew install antlr4
        elif 'centos' in PLATFORM:
            !sudo yum install antlr
    if args.config:
        pass
    if args.uninstall:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !{PREFIX} apt-get purge {yes} antlr4
        elif 'darwin' in PLATFORM:
            !brew uninstall antlr4
        elif 'centos' in PLATFORM:
            !sudo yum remove antlr


# ------------------------- programming languages -------------------------
def python3(args):
    yes = '-y' if args.yes else ''
    if args.install:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !{PREFIX} apt-get install {yes} python3 python3-dev python3-setuptools python3-pip python3-venv
        if 'darwin' in PLATFORM:
            !brew install python3
        if 'centos' in PLATFORM:
            !{PREFIX} yum install {yes} python34 python34-devel python34-pip
            !{PREFIX} pip3.4 install setuptools
    if args.config:
        pass
    if args.uninstall:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !{PREFIX} apt-get purge {yes} python3 python3-dev python3-setuptools python3-pip python3-venv
        if 'darwin' in PLATFORM:
            !brew uninstall python3
        if 'centos' in PLATFORM:
            !yum remove python3


# ------------------------- JupyterLab kernels -------------------------
def itypescript(args):
    yes = '-y' if args.yes else ''
    if args.install:
        !{PREFIX} npm install -g --unsafe-perm itypescript
        !{PREFIX} its --ts-hide-undefined --install=global
    if args.uninstall:
        !{PREFIX} jupyter kernelspec uninstall typescript
        !{PREFIX} npm uninstall itypescript
    if args.config:
        pass


def beakerx(args):
    yes = '-y' if args.yes else ''
    if args.install:
        !{PREFIX} pip3 install beakerx
        !{PREFIX} beakerx install
        !{PREFIX} jupyter labextension install @jupyter-widgets/jupyterlab-manager
        !{PREFIX} jupyter labextension install beakerx-jupyterlab
    if args.uninstall:
        !{PREFIX} jupyter labextension uninstall beakerx-jupyterlab
        !{PREFIX} jupyter labextension uninstall @jupyter-widgets/jupyterlab-manager
        !{PREFIX} beakerx uninstall
        !{PREFIX} pip3 uninstall beakerx
    if args.config:
        !{PREFIX} chown -R {USER_ID}:{GROUP_ID} {HOME}


def almond(args):
    if args.install:
        coursier = os.path.join(HOME, '.local/bin/coursier')
        almond = os.path.join(HOME, '.local/bin/almond')
        !curl -L -o {coursier} https://git.io/coursier-cli
        !chmod +x {coursier}
        !{coursier} bootstrap -f -r jitpack -i user \
                -I user:sh.almond:scala-kernel-api_{args.scala_version}:{args.almond_version} \
                -o {almond} \
                sh.almond:scala-kernel_{args.scala_version}:{args.almond_version}
        !{PREFIX} {almond} --install --global --force
    if args.config:
        pass


def almond_args(subparser):
    subparser.add_argument(
        '-a',
        '--almond-version',
        dest='almond_version',
        default='0.4.0',
        help='the version (0.4.0 by default) of Almond to install.')
    subparser.add_argument(
        '-s',
        '--scala-version',
        dest='scala_version',
        default='2.12.8',
        help='the version (2.12.8 by default) of Scala to install.')


# ------------------------- web tools -------------------------
def ssh_server(args):
    if args.install:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !{PREFIX} apt-get install {yes} openssh-server fail2ban
        elif 'darwin' in PLATFORM:
            pass
        elif 'centos' in PLATFORM:
            pass
    if args.config:
        pass
    if args.uninstall:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !{PREFIX} apt-get purge {yes} openssh-server fail2ban
        elif 'darwin' in PLATFORM:
            pass
        elif 'centos' in PLATFORM:
            pass


def proxychains(args):
    if args.install:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !{PREFIX} apt-get install proxychains
        elif 'darwin' in PLATFORM:
            !brew install proxychains-ng
        elif 'centos' in PLATFORM:
            !sudo yum install proxychains
    if args.config:
        print('Configuring proxychains ...')
        des_dir = os.path.join(HOME, '.proxychains')
        !mkdir -p {des_dir}
        !cp {BASE_DIR}/proxychains/proxychains.conf {des_dir}/
    if args.uninstall:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !{PREFIX} apt-get purge proxychains
        elif 'darwin' in PLATFORM:
            !brew uninstall proxychains-ng
        elif 'centos' in PLATFORM:
            !sudo yum remove proxychains


def blogging(args):
    if args.install:
        # python3(args)
        !pip3 install --user pelican markdown
    if args.config:
        pass
    if args.uninstall:
        !pip3 uninstall --user pelican markdown


def download_tools(args):
    if args.install:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !{PREFIX} apt-get install {yes} wget curl aria2
        elif 'darwin' in PLATFORM:
            !brew install wget curl aria2
        elif 'centos' in PLATFORM:
            pass
    if args.config:
        pass
    if args.uninstall:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !{PREFIX} apt-get purge {yes} wget curl aria2
        elif 'darwin' in PLATFORM:
            !brew uninstall wget curl aria2
        elif 'centos' in PLATFORM:
            pass


# ------------------------- IDE -------------------------
def intellijj_idea(args):
    yes = '-y' if args.yes else ''
    if args.install:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !{PREFIX} add-apt-repository ppa:mmk2410/intellij-idea
            !{PREFIX} apt-get update && apt-get install {yes} intellij-idea-community
        elif 'darwin' in PLATFORM:
            !brew cask install intellij-idea-ce
        elif 'centos' in PLATFORM:
            pass
    if args.uninstall:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !{PREFIX} apt-get purge {yes} intellij-idea-ce
        elif 'darwin' in PLATFORM:
            !brew cask uninstall intellij-idea-ce
        elif 'centos' in PLATFORM:
            pass
    if args.config:
        pass


def visual_studio_code(args):
    yes = '-y' if args.yes else ''
    if args.install:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !{PREFIX} apt-get {yes} install vscode
        elif 'darwin' in PLATFORM:
            !brew cask install visual-studio-code
        elif 'centos' in PLATFORM:
            !sudo yum install vscode
    if args.uninstall:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !{PREFIX} apt-get purge {yes} vscode
        elif 'darwin' in PLATFORM:
            !brew cask uninstall visual-studio-code
        elif 'centos' in PLATFORM:
            !sudo yum remove vscode
    if args.config:
        srcfile = f'{BASE_DIR}/vscode/settings.json'
        desdir = f'{HOME}/.config/Code/User/'
        !mkdir -p {desdir}
        !ln -svf {srcfile} {desdir}


# ------------------------- helper functions -------------------------
def to_bool(value: Any) -> bool:
    """Convert an object to a bool value (True or False).

    :param value: any object that can be converted to a bool value.
    :return: True or False.
    """
    if isinstance(value, bool):
        return value
    if isinstance(value, str):
        if value.lower() in ('t', 'true', 'y', 'yes'):
            return True
        if value.isdigit():
            return int(value) != 0
        return False
    if isinstance(value, int) and value != 0:
        return True
    if isinstance(value, Sized) and len(value) > 0:
        return True
    return False


def _add_subparser(subparsers, name: str, aliases: Sequence = (), func: Union[Callable, None] = None, add_argument: Union[Callable, None] = None):
    sub_cmd = re.sub(r'\s+', '_', name.lower())
    aliases = [alias for alias in aliases if alias != sub_cmd]
    func = func if func else eval(sub_cmd)
    subparser = subparsers.add_parser(
        sub_cmd,
        aliases=aliases,
        help=f'install and configure {name}.')
    subparser.add_argument(
        '-i',
        '--install',
        dest='install',
        action='store_true',
        help=f'install {name}.')
    subparser.add_argument(
        '-u',
        '--uninstall',
        dest='uninstall',
        action='store_true',
        help=f'uninstall {name}.')
    subparser.add_argument(
        '-y',
        '--yes',
        dest='yes',
        action='store_true',
        help='automatical yes to prompts.')
    subparser.add_argument(
        '-c',
        '--configure',
        dest='config',
        action='store_true',
        help=f'configure {name}.')
    if add_argument:
        add_argument(subparser)
    subparser.set_defaults(func=func)
    return subparser


if __name__ == '__main__':
    args = parse_args()
    args.func(args)
