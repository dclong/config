#!/usr/bin/env ipython3

import os
import shutil
import platform
from typing import Any, List, Sequence
from argparse import ArgumentParser
import getpass
import grp
import logging

USER = getpass.getuser()
GROUP = grp.getgrnam(USER).gr_name
PREFIX = '' if USER == 'root' else 'sudo'
HOME = os.path.expanduser('~')
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
ARCHIVES_DIR =  os.path.join(HOME, 'archives')
PLATFORM = platform.platform().lower() 
msg_cygwin_install = 'Installing {pkg} in Cygwin via command line is not supported currently.'
msg_cygwin_remove = 'Removing {pkg} in Cygwin via command line is not supported currently.'


def parse_args(args=None, namespace=None):
    """Parse command-line arguments for the install/configuration util.
    """
    parser = ArgumentParser(description='Easy installation and configuration for Unix/Linux')
    subparsers = parser.add_subparsers(dest='sub_cmd', help='Sub commands.')
    _subparse_vim(subparsers)
    _subparse_neovim(subparsers)
    _subparse_space_vim(subparsers)
    _subparse_python3(subparsers)
    _subparse_proxychains(subparsers)
    _subparse_completion(subparsers)
    _subparse_blog(subparsers)
    _subparse_antlr(subparsers)
    _subparse_git(subparsers)
    _subparse_beakerx(subparsers)
    _subparse_shell_utils(subparsers)
    return parser.parse_args(args=args, namespace=namespace)


def shell_utils(args):
    yes = '-y' if args.yes else ''
    if args.install:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !{PREFIX} apt-get install {yes} bash-completion command-not-found man-db
        elif 'darwin' in PLATFORM:
            !brew install bash-completion man-db
        elif 'centos' in PLATFORM:
            !sudo yum install bash-completion command-not-found man-db
        elif 'cygwin' in PLATFORM:
            logging.error(msg_cygwin_install.format(pkg='Git'))
    if args.uninstall:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !{PREFIX} apt-get purge {yes} bash-completion command-not-found man-db
        elif 'darwin' in PLATFORM:
            !brew uninstall bash-completion man-db
        elif 'centos' in PLATFORM:
            !sudo yum remove bash-completion command-not-found man-db
        elif 'cygwin' in PLATFORM:
            logging.error(msg_cygwin_remove.format(pkg='Git'))
    if args.config:
        pass


def _subparse_shell_utils(subparsers):
    shutils = subparsers.add_parser(
        'shell_utils',
        aliases=['sh_utils', 'shutils', 'shu', 'su'],
        help='install and configure shell utils.')
    shutils.add_argument(
        '-i',
        '--install',
        dest='install',
        action='store_true',
        help='install shell utils.')
    shutils.add_argument(
        '-u',
        '--uninstall',
        dest='uninstall',
        action='store_true',
        help='uninstall shell utils.')
    shutils.add_argument(
        '-y',
        '--yes',
        dest='yes',
        action='store_true',
        help='automatical yes to prompts.')
    shutils.add_argument(
        '-c',
        '--configure',
        dest='config',
        action='store_true',
        help='configure shell utils.')
    shutils.set_defaults(func=shell_utils)

def _subparse_beakerx(subparsers):
    beakerx = subparsers.add_parser(
        'beakerx',
        aliases=['bkx', 'bk'],
        help='install and configure BeakerX.')
    beakerx.add_argument(
        '-i',
        '--install',
        dest='install',
        action='store_true',
        help='install BeakerX.')
    beakerx.add_argument(
        '-u',
        '--uninstall',
        dest='uninstall',
        action='store_true',
        help='uninstall BeakerX.')
    beakerx.add_argument(
        '-y',
        '--yes',
        dest='yes',
        action='store_true',
        help='automatical yes to prompts.')
    beakerx.add_argument(
        '-c',
        '--configure',
        dest='config',
        action='store_true',
        help='configure BeakerX.')
    beakerx.set_defaults(func=beakerx)


def beakerx(args):
    yes = '-y' if args.yes else ''
    if args.install:
        !{PREFIX} pip3 install beakerx
        !{PREFIX} beakerx install
        !{PREFIX} jupyter labextension install @jupyter-widgets/jupyterlab-manager
        !{PREFIX} jupyter labextension install beakerx-jupyterlab
    if args.uninstall:
        !{PREFIX} jupyter labextension uninstall beakerx-jupyterlab
        !{PREFIX} jupyter labextension uninstall @jupyter-widgets/jupyterlab-manager
        !{PREFIX} beakerx uninstall
        !{PREFIX} pip3 uninstall beakerx
    if args.config:
        !{PREFIX} chown -R {USER}:{GROUP} {HOME}


def _subparse_git(subparsers):
    git = subparsers.add_parser(
        'git',
        help='install and configure Git.')
    git.add_argument(
        '-i',
        '--install',
        dest='install',
        action='store_true',
        help='install Git.')
    git.add_argument(
        '-u',
        '--uninstall',
        dest='uninstall',
        action='store_true',
        help='uninstall Git.')
    git.add_argument(
        '-y',
        '--yes',
        dest='yes',
        action='store_true',
        help='automatical yes to prompts.')
    git.add_argument(
        '-c',
        '--configure',
        dest='config',
        action='store_true',
        help='configure Git.')
    git.set_defaults(func=git)


def git(args):
    yes = '-y' if args.yes else ''
    if args.install:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !wajig install {yes} git
        elif 'darwin' in PLATFORM:
            !brew install git
        elif 'centos' in PLATFORM:
            !sudo yum install git
        elif 'cygwin' in PLATFORM:
            logging.error(msg_cygwin_install.format(pkg='Git'))
    if args.uninstall:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !wajig purge {yes} git
        elif 'darwin' in PLATFORM:
            !brew uninstall git
        elif 'centos' in PLATFORM:
            !sudo yum remove git
        elif 'cygwin' in PLATFORM:
            logging.error(msg_cygwin_remove.format(pkg='Git'))
    if args.config:
        !cp '{BASE_DIR}/git/gitconfig' $HOME/.gitconfig
        !cp '{BASE_DIR}/git/gitignore' $HOME/.gitignore


def antlr(args):
    yes = '-y' if args.yes else ''
    if args.install:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !wajig install {yes} antlr4
        elif 'darwin' in PLATFORM:
            !brew install antlr4
        elif 'centos' in PLATFORM:
            !sudo yum install antlr
        elif 'cygwin' in PLATFORM:
            logger.debug(msg_cygwin_install.format(pkg='ANTLR'))
    if args.config:
        pass
    if args.uninstall:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !wajig purge {yes} antlr4
        elif 'darwin' in PLATFORM:
            !brew uninstall antlr4
        elif 'centos' in PLATFORM:
            !sudo yum remove antlr
        elif 'cygwin' in PLATFORM:
            logger.debug(msg_cygwin_remove.format(pkg='ANTLR'))


def _subparse_antlr(subparsers):
    antlr = subparsers.add_parser(
        'antlr',
        help='install and configure ANTLR.')
    antlr.add_argument(
        '-i',
        '--install',
        dest='install',
        action='store_true',
        help='install ANTLR.')
    antlr.add_argument(
        '-u',
        '--uninstall',
        dest='uninstall',
        action='store_true',
        help='uninstall ANTLR.')
    antlr.add_argument(
        '-y',
        '--yes',
        dest='yes',
        action='store_true',
        help='automatical yes to prompts.')
    antlr.add_argument(
        '-c',
        '--configure',
        dest='config',
        action='store_true',
        help='configure ANTLR.')
    antlr.set_defaults(func=antlr)


def neovim(args):
    yes = '-y' if args.yes else ''
    if args.install:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !wajig install {yes} neovim
        elif 'darwin' in PLATFORM:
            !brew install neovim
        elif 'centos' in PLATFORM:
            !sudo yum install neovim
        elif 'cygwin' in PLATFORM:
            logging.error(msg_cygwin_install.format(pkg='Git'))
    if args.uninstall:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !wajig purge {yes} neovim
        elif 'darwin' in PLATFORM:
            !brew uninstall neovim
        elif 'centos' in PLATFORM:
            !sudo yum remove neovim
        elif 'cygwin' in PLATFORM:
            logging.error(msg_cygwin_remove.format(pkg='Git'))
    if args.config:
        pass


def _subparse_neovim(subparsers):
    neovim = subparsers.add_parser(
        'neovim',
        aliases=['nvim'],
        help='install and configure Neovim.')
    neovim.add_argument(
        '-i',
        '--install',
        dest='install',
        action='store_true',
        help='install Neovim.')
    neovim.add_argument(
        '-u',
        '--uninstall',
        dest='uninstall',
        action='store_true',
        help='uninstall Neovim.')
    neovim.add_argument(
        '-y',
        '--yes',
        dest='yes',
        action='store_true',
        help='automatical yes to prompts.')
    neovim.add_argument(
        '-c',
        '--configure',
        dest='config',
        action='store_true',
        help='configure Neovim.')
    neovim.set_defaults(func=neovim)


def vim(args):
    yes = '-y' if args.yes else ''
    if args.install:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !wajig install {yes} vim vim-nox
        elif 'darwin' in PLATFORM:
            !brew install vim
        elif 'centos' in PLATFORM:
            !sudo yum install vim
        elif 'cygwin' in PLATFORM:
            logging.error(msg_cygwin_install.format(pkg='Git'))
    if args.uninstall:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !wajig purge {yes} vim vim-nox
        elif 'darwin' in PLATFORM:
            !brew uninstall vim
        elif 'centos' in PLATFORM:
            !sudo yum remove vim
        elif 'cygwin' in PLATFORM:
            logging.error(msg_cygwin_remove.format(pkg='Git'))
    if args.config:
        pass


def _subparse_vim(subparsers):
    vim = subparsers.add_parser(
        'vim',
        help='install and configure Vim.')
    vim.add_argument(
        '-i',
        '--install',
        dest='install',
        action='store_true',
        help='install Vim.')
    vim.add_argument(
        '-u',
        '--uninstall',
        dest='uninstall',
        action='store_true',
        help='uninstall Vim.')
    vim.add_argument(
        '-y',
        '--yes',
        dest='yes',
        action='store_true',
        help='automatical yes to prompts.')
    vim.add_argument(
        '-c',
        '--configure',
        dest='config',
        action='store_true',
        help='configure Vim.')
    vim.set_defaults(func=vim)


def completion(args):
    if args.install:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !wajig install bash-completion
        elif 'darwin' in PLATFORM:
            !brew install bash-completion
        elif 'centos' in PLATFORM:
            !sudo yum install bash-completion
        elif 'cygwin' in PLATFORM:
            logging.error(msg_cygwin_install.format(pkg='Git'))
    if args.config:
        pass
    if args.uninstall:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !wajig purge bash-completion
        elif 'darwin' in PLATFORM:
            !brew uninstall bash-completion
        elif 'centos' in PLATFORM:
            !sudo yum remove bash-completion
        elif 'cygwin' in PLATFORM:
            logging.error(msg_cygwin_remove.format(pkg='Git'))


def _subparse_completion(subparsers):
    completion = subparsers.add_parser(
        'completion',
        aliases=['comp', 'cp'],
        help='install and configure bash completions.')
    completion.add_argument(
        '-i',
        '--install',
        dest='install',
        action='store_true',
        help='install bash completion.')
    completion.add_argument(
        '-u',
        '--uninstall',
        dest='uninstall',
        action='store_true',
        help='uninstall bash completion.')
    completion.add_argument(
        '-c',
        '--configure',
        dest='config',
        action='store_true',
        help='configure bash completion.')
    completion.set_defaults(func=proxychains)


def proxychains(args):
    if args.install:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !wajig install proxychains
        elif 'darwin' in PLATFORM:
            !brew install proxychains-ng
        elif 'centos' in PLATFORM:
            !sudo yum install proxychains
        elif 'cygwin' in PLATFORM:
            logging.error(msg_cygwin_install.format(pkg='Git'))
    if args.config:
        print('Configuring proxychains ...')
        des_dir = os.path.join(HOME, '.proxychains')
        !mkdir -p {des_dir}
        !cp {ARCHIVES_DIR}/config/proxychains/proxychains.conf {des_dir}/
    if args.uninstall:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !wajig purge proxychains
        elif 'darwin' in PLATFORM:
            !brew uninstall proxychains-ng
        elif 'centos' in PLATFORM:
            !sudo yum remove proxychains
        elif 'cygwin' in PLATFORM:
            logging.error(msg_cygwin_remove.format(pkg='Git'))


def _subparse_proxychains(subparsers):
    proxychains = subparsers.add_parser(
        'proxychains',
        aliases=['pchains', 'pc'],
        help='install and configure tools for ProxyChains.')
    proxychains.add_argument(
        '-i',
        '--install',
        dest='install',
        action='store_true',
        help='install ProxyChains.')
    proxychains.add_argument(
        '-u',
        '--uninstall',
        dest='uninstall',
        action='store_true',
        help='uninstall ProxyChains.')
    proxychains.add_argument(
        '-c',
        '--configure',
        dest='config',
        action='store_true',
        help='configure ProxyChains.')
    proxychains.set_defaults(func=proxychains)


def blog(args):
    if args.install:
        # python3(args)
        !pip3 install --user pelican markdown
    if args.config:
        pass
    if args.uninstall:
        !pip3 uninstall --user pelican markdown


def _subparse_blog(subparsers):
    blog = subparsers.add_parser(
        'blog',
        help='install and configure tools for blogging.')
    blog.add_argument(
        '-i',
        '--install',
        dest='install',
        action='store_true',
        help='install tools for blogging.')
    blog.add_argument(
        '-u',
        '--uninstall',
        dest='uninstall',
        action='store_true',
        help='uninstall tools for blogging.')
    blog.add_argument(
        '-c',
        '--configure',
        dest='config',
        action='store_true',
        help='configure tools for blogging.')
    blog.set_defaults(func=blog)


def python3(args):
    yes = '-y' if args.yes else ''
    if args.install:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !wajig install {yes} python3 python3-dev python3-setuptools python3-pip python3-venv
        if 'darwin' in PLATFORM:
            !brew install python3
        if 'centos' in PLATFORM:
            !yum install python3
        elif 'cygwin' in PLATFORM:
            logging.error(msg_cygwin_install.format(pkg='Git'))
    if args.config:
        pass
    if args.uninstall:
        if 'ubuntu' in PLATFORM or 'debian' in PLATFORM:
            !wajig purge {yes} python3 python3-dev python3-setuptools python3-pip python3-venv
        if 'darwin' in PLATFORM:
            !brew uninstall python3
        if 'centos' in PLATFORM:
            !yum remove python3
        elif 'cygwin' in PLATFORM:
            logging.error(msg_cygwin_remove.format(pkg='Git'))


def _subparse_python3(subparsers):
    py3 = subparsers.add_parser(
        'python3',
        aliases=['py3'],
        help='install and configure Python 3.')
    py3.add_argument(
        '-i',
        '--install',
        dest='install',
        action='store_true',
        help='install Python 3.')
    py3.add_argument(
        '-u',
        '--uninstall',
        dest='uninstall',
        action='store_true',
        help='uninstall Python 3.')
    py3.add_argument(
        '-c',
        '--configure',
        dest='config',
        action='store_true',
        help='configure Python 3.')
    py3.set_defaults(func=python3)


def _svim_true_color(true_color: bool):
    FILE = os.path.join(HOME, '.SpaceVim.d/init.toml')
    if os.path.isfile(FILE):
        with open(FILE, 'r') as fin:
            lines = fin.readlines()
        for i, line in enumerate(lines):
            if line.strip().startswith('enable_guicolors'):
                if true_color:
                    lines[i] = line.replace('false', 'true')
                else:
                    lines[i] = line.replace('true', 'false')
        with open(FILE, 'w') as fout:
            fout.writelines(lines)


def space_vim(args):
    yes = '-y' if args.yes else ''
    if args.install:
        !curl -sLf https://spacevim.org/install.sh | bash
        if shutil.which('nvim'):
            !nvim --headless +'call dein#install()' +qall
    if args.uninstall:
        !curl -sLf https://spacevim.org/install.sh | bash -s -- --uninstall
    if args.config:
        _svim_true_color(args.true_color)


def _subparse_space_vim(subparsers):
    svim = subparsers.add_parser(
        'space_vim',
        aliases=['svim'],
        help='install and configure SpaceVim.')
    svim.add_argument(
        '-i',
        '--install',
        dest='install',
        action='store_true',
        help='install SpaceVim.')
    svim.add_argument(
        '-u',
        '--uninstall',
        dest='uninstall',
        action='store_true',
        help='uninstall SpaceVim.')
    svim.add_argument(
        '-y',
        '--yes',
        dest='yes',
        action='store_true',
        help='automatical yes to prompts.')
    svim.add_argument(
        '-c',
        '--configure',
        dest='config',
        action='store_true',
        help='configure SpaceVim.')
    svim.add_argument(
        '-t',
        '--true-color',
        dest='true_color',
        type=to_bool,
        default=True,
        help='whether to enable true color for SpaceVim.')
    svim.set_defaults(func=space_vim)


def to_bool(value: Any) -> bool:
    """Convert an object to a bool value (True or False).

    :param value: any object that can be converted to a bool value.
    :return: True or False.
    """
    if isinstance(value, bool):
        return value
    if isinstance(value, str):
        if value.lower() in ('t', 'true', 'y', 'yes'):
            return True
        if value.isdigit():
            return int(value) != 0
        return False
    if isinstance(value, int) and value != 0:
        return True
    if isinstance(value, Sized) and len(value) > 0:
        return True
    return False


if __name__ == '__main__':
    args = parse_args()
    args.func(args)
