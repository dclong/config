import os
import sys
import shutil
from typing import List
from pathlib import Path
import datetime
import re
import subprocess
import getpass
import socket
import platform
from IPython.terminal.prompts import Prompts, Token
from IPython.core.magic import (register_line_magic, register_cell_magic, register_line_cell_magic)
try:
    import dsutil
except:
    pass
try:
    import pybay
    from pybay.const import *
except:
    pass
HOME = Path.home()
PLATFORM = platform.platform().lower()
USER = getpass.getuser()
HOST = re.sub("\.local$", "", socket.gethostname())


# ------------------------------- Command Prompt -----------------------------------
class MyPrompt(Prompts):

    def _git_status(self) -> List[bytes]:
        try:
            proc = subprocess.run(["git", "status"], stdout=subprocess.PIPE)
        except (FileNotFoundError, subprocess.CalledProcessError):
            return []
        lines = [line.strip() for line in proc.stdout.splitlines()]
        # get rid of the leading #
        for idx, line in enumerate(lines):
            if line.startswith(b"#"):
                lines[idx] = line[1:].strip()
        return [line for line in lines if line != b""]

    def _changed(self, line: bytes) -> bool:
        """Check whether the line indicating changes in the Git Repository.
        """
        keywords = [
            b"new file:",
            b"deleted:",
            b"modified:",
            b"renamed:",
            b"untracked files:",
            b"your branch is ahead",
        ]
        line = line.lower().strip()
        for key in keywords:
            if line.startswith(key):
                return True
        return False

    def _git_changed(self) -> bool:
        for line in self._git_status():
            if self._changed(line):
                return True
        return False

    def _git_branch(self) -> str:
        """Get the current branch the current Git repository.
        :return: The name of the current branch.
        """
        try:
            proc = subprocess.run(["git", "branch"], stdout=subprocess.PIPE)
        except (FileNotFoundError, subprocess.CalledProcessError):
            return ""
        for line in proc.stdout.splitlines():
            line = line.strip()
            if line.startswith(b"*"):
                return line[1:].strip().decode()
        return ""

    def _git_remote(self) -> List[str]:
        """Get the remote names of the current Git repository.
        :return: A list of remote names.
        """
        try:
            proc = subprocess.run(["git", "remote"], stdout=subprocess.PIPE)
        except (FileNotFoundError, subprocess.CalledProcessError):
            return ""
        return [line.strip().decode() for line in proc.stdout.splitlines() if line.strip() != b""]

    def in_prompt_tokens(self, cli=None):
        remotes = ""
        branch = ""
        # if Path(".git").is_dir():
        if False:
            remotes = "(" + "|".join(self._git_remote()) + ")"
            branch = "[" + self._git_branch() + f"{'*' if self._git_changed() else ''}]"
        cwd = Path.cwd()
        return [
            (Token, f"{USER}@{HOST} {cwd} {remotes} {branch}"),
            (Token.Prompt, f"\nIn[{self.shell.execution_count}] >>> ")
        ]


get_ipython().prompts = MyPrompt(get_ipython())

# ------------------------------- magic -----------------------------------
@register_line_magic
def trash(line: str):
    path = Path(line)
    trash_dir = Path.home() / ".Trash"
    if any(dist in PLATFORM for dist in ("ubuntu", "debian")):
        trash_dir = Path.home() / ".local/share/Trash/files"
    trash_dir.mkdir(mode=0o700, parents=True, exist_ok=True)
    backup = trash_dir / path.name
    if backup.exists():
        backup = backup.with_name(backup.name + "_" + datetime.datetime.now().strftime("%Y%m%d%H%M%S%f"))
    shutil.move(path, backup)
# ------------------------------- alias -----------------------------------
#if "linux" in PLATFORM: 
#    %alias cs cd %l && ls --color=auto
#else:
#    %alias cs cd %l && ls -G
# ------------------------------- Symbolic Links -----------------------------------
def symlink_blog() -> None:
    path = HOME / ".local/bin/blog"
    blog1 = HOME / "archives/blog/main.py"
    if blog1.is_file():
        try:
            path.unlink()
        except FileNotFoundError:
            pass
        path.symlink_to(blog1)
        return
    blog2 = Path("/workdir/blog/main.py")
    if blog2.is_file():
        try:
            path.unlink()
        except FileNotFoundError:
            pass
        path.symlink_to(blog2)


symlink_blog()
# -------------------------------------------------------------------------
# use dict to dedup while keep the original order!!!
os.environ["PATH"] = ":".join({str(path): None for path in
    list(HOME.glob(".*/bin")) + \
    list(HOME.glob("Library/Python/3.*/bin")) + \
    list(Path("/").glob("apache/hadoop/bin")) + \
    os.environ["PATH"].split(":")
})
%rehashx